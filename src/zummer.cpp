#include <avr/io.h>
#include "zummer.h"

void initTimer0()
{
    TIMSK &= ~(1 << TOIE0); // откл. прерывание переполнения
    //3. Запишите новые значения в TCNT2, OCR2 и TCCR2.
    TCNT0 = 0; // регистр счетчика

    // Частота тактирвоания 1000000 Гц
    // Частота счетчика част. такт./предделитель
    // Длительность 1 тика = предделитель/част. такт. (сек)
    // Длительность 256 тиков (время между переполнениями) = 256*предделитель/част. такт. (сек)
    // Длительность 256 тиков (время между переполнениями) для такта 1МГц = 256*предделитель/1000000

    // Установка предделителя 1024
    // CS 22-21-20 1-1-1
    // Итого 1024*256/1000000 = 0,262144 сек.

    // Предделитель 256
    // CS 22-21-20 1-1-0
    // 256 тиков = 256*256/1000000 = 0,065536 сек.

    // Предделитель 64
    // CS 22-21-20 1-0-1
    // 256 тиков = 64*256/1000000 = 0,016384 сек.

    // Предделитель 8
    // CS 02-01-00 0-1-0
    // 256 тиков = 8*256/1000000 = 0,002048 сек.

    // Предделитель 1
    // CS 22-21-20 1-0-1
    // 256 тиков = 1*256/1000000 = 0,000256 сек.

    TCCR0 |= (1 << (CS00)); // предделитель 1
    //TCCR0 |= (1<<(CS01)); // предделитель 8
    //TCCR0 |= (1<<CS02); // предделитель 256
    //TCCR0 |= (1<<CS00)|(1<<CS01); // предделитель 64
    //TCCR0 |= (1<<CS00)|(1<<CS02); // предделитель 1024

    //5. Снимите флаги прерывания Timer/Counter0.
    TIFR &= ~(1 << TOV0); // сброс флаг переполнения
    //6. Разрешить прерывания, если это необходимо.
    SREG |= (1 << (SREG_I)); // глобально разрешить прерывания
                             //TIMSK |= (1 << TOIE0); // вкл. прерывание переполнения
}

void stopTimer0()
{
    TIMSK &= ~(1 << TOIE0);                              // откл. прерывание переполнения
    TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02)); // остановка таймера
    TIFR &= ~(1 << TOV0);                                // сброс флаг переполнения
}